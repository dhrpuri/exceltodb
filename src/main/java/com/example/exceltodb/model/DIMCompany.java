/*
 * DBNDataInMotionAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.example.exceltodb.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * DIMCompany
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-12-18T11:35:52.868958+04:00[Asia/Dubai]")

public class DIMCompany {
  @JsonProperty("company")
  private CompanyType company = null;

  @JsonProperty("ownerships")
  private List<Ownerships> ownerships = null;

  @JsonProperty("companyMembers")
  private List<CompanyMembers> companyMembers = null;

  @JsonProperty("companyActivities")
  private List<CompanyActivities> companyActivities = null;

  @JsonProperty("UBODeclaration")
  private UBODeclarationType ubODeclaration = null;

  @JsonProperty("legalContract")
  private List<LegalContract> legalContract = null;

  @JsonProperty("commerceRegistry")
  private CommerceRegistryType commerceRegistry = null;

  @JsonProperty("address")
  private CompanyAddressType address = null;

  @JsonProperty("documents")
  private List<Documents> documents = null;

  public DIMCompany company(CompanyType company) {
    this.company = company;
    return this;
  }

   /**
   * Get company
   * @return company
  **/

  public CompanyType getCompany() {
    return company;
  }

  public void setCompany(CompanyType company) {
    this.company = company;
  }

  public DIMCompany ownerships(List<Ownerships> ownerships) {
    this.ownerships = ownerships;
    return this;
  }

  public DIMCompany addOwnershipsItem(Ownerships ownershipsItem) {
    if (this.ownerships == null) {
      this.ownerships = new ArrayList<>();
    }
    this.ownerships.add(ownershipsItem);
    return this;
  }

   /**
   * Get ownerships
   * @return ownerships
  **/

  public List<Ownerships> getOwnerships() {
    return ownerships;
  }

  public void setOwnerships(List<Ownerships> ownerships) {
    this.ownerships = ownerships;
  }

  public DIMCompany companyMembers(List<CompanyMembers> companyMembers) {
    this.companyMembers = companyMembers;
    return this;
  }

  public DIMCompany addCompanyMembersItem(CompanyMembers companyMembersItem) {
    if (this.companyMembers == null) {
      this.companyMembers = new ArrayList<>();
    }
    this.companyMembers.add(companyMembersItem);
    return this;
  }

   /**
   * Get companyMembers
   * @return companyMembers
  **/

  public List<CompanyMembers> getCompanyMembers() {
    return companyMembers;
  }

  public void setCompanyMembers(List<CompanyMembers> companyMembers) {
    this.companyMembers = companyMembers;
  }

  public DIMCompany companyActivities(List<CompanyActivities> companyActivities) {
    this.companyActivities = companyActivities;
    return this;
  }

  public DIMCompany addCompanyActivitiesItem(CompanyActivities companyActivitiesItem) {
    if (this.companyActivities == null) {
      this.companyActivities = new ArrayList<>();
    }
    this.companyActivities.add(companyActivitiesItem);
    return this;
  }

   /**
   * Get companyActivities
   * @return companyActivities
  **/

  public List<CompanyActivities> getCompanyActivities() {
    return companyActivities;
  }

  public void setCompanyActivities(List<CompanyActivities> companyActivities) {
    this.companyActivities = companyActivities;
  }

  public DIMCompany ubODeclaration(UBODeclarationType ubODeclaration) {
    this.ubODeclaration = ubODeclaration;
    return this;
  }

   /**
   * Get ubODeclaration
   * @return ubODeclaration
  **/

  public UBODeclarationType getUbODeclaration() {
    return ubODeclaration;
  }

  public void setUbODeclaration(UBODeclarationType ubODeclaration) {
    this.ubODeclaration = ubODeclaration;
  }

  public DIMCompany legalContract(List<LegalContract> legalContract) {
    this.legalContract = legalContract;
    return this;
  }

  public DIMCompany addLegalContractItem(LegalContract legalContractItem) {
    if (this.legalContract == null) {
      this.legalContract = new ArrayList<>();
    }
    this.legalContract.add(legalContractItem);
    return this;
  }

   /**
   * Get legalContract
   * @return legalContract
  **/

  public List<LegalContract> getLegalContract() {
    return legalContract;
  }

  public void setLegalContract(List<LegalContract> legalContract) {
    this.legalContract = legalContract;
  }

  public DIMCompany commerceRegistry(CommerceRegistryType commerceRegistry) {
    this.commerceRegistry = commerceRegistry;
    return this;
  }

   /**
   * Get commerceRegistry
   * @return commerceRegistry
  **/

  public CommerceRegistryType getCommerceRegistry() {
    return commerceRegistry;
  }

  public void setCommerceRegistry(CommerceRegistryType commerceRegistry) {
    this.commerceRegistry = commerceRegistry;
  }

  public DIMCompany address(CompanyAddressType address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/

  public CompanyAddressType getAddress() {
    return address;
  }

  public void setAddress(CompanyAddressType address) {
    this.address = address;
  }

  public DIMCompany documents(List<Documents> documents) {
    this.documents = documents;
    return this;
  }

  public DIMCompany addDocumentsItem(Documents documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

   /**
   * Get documents
   * @return documents
  **/

  public List<Documents> getDocuments() {
    return documents;
  }

  public void setDocuments(List<Documents> documents) {
    this.documents = documents;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DIMCompany diMCompany = (DIMCompany) o;
    return Objects.equals(this.company, diMCompany.company) &&
        Objects.equals(this.ownerships, diMCompany.ownerships) &&
        Objects.equals(this.companyMembers, diMCompany.companyMembers) &&
        Objects.equals(this.companyActivities, diMCompany.companyActivities) &&
        Objects.equals(this.ubODeclaration, diMCompany.ubODeclaration) &&
        Objects.equals(this.legalContract, diMCompany.legalContract) &&
        Objects.equals(this.commerceRegistry, diMCompany.commerceRegistry) &&
        Objects.equals(this.address, diMCompany.address) &&
        Objects.equals(this.documents, diMCompany.documents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(company, ownerships, companyMembers, companyActivities, ubODeclaration, legalContract, commerceRegistry, address, documents);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DIMCompany {\n");
    
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    ownerships: ").append(toIndentedString(ownerships)).append("\n");
    sb.append("    companyMembers: ").append(toIndentedString(companyMembers)).append("\n");
    sb.append("    companyActivities: ").append(toIndentedString(companyActivities)).append("\n");
    sb.append("    ubODeclaration: ").append(toIndentedString(ubODeclaration)).append("\n");
    sb.append("    legalContract: ").append(toIndentedString(legalContract)).append("\n");
    sb.append("    commerceRegistry: ").append(toIndentedString(commerceRegistry)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
