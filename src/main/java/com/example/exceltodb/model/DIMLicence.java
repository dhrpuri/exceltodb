/*
 * DBNDataInMotionAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.example.exceltodb.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * DIMLicence
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-12-18T11:35:52.868958+04:00[Asia/Dubai]")

public class DIMLicence {
  @JsonProperty("licence")
  private LicenceType licence = null;

  @JsonProperty("tradeName")
  private TradeNameType tradeName = null;

  @JsonProperty("businessLocation")
  private List<BusinessLocation> businessLocation = null;

  @JsonProperty("digitalPlatform")
  private List<DigitalPlatform> digitalPlatform = null;

  @JsonProperty("address")
  private LicenceAddressType address = null;

  @JsonProperty("licenceMembers")
  private List<LicenceMembers> licenceMembers = null;

  @JsonProperty("operatingActivities")
  private List<OperatingActivities> operatingActivities = null;

  @JsonProperty("documents")
  private List<Documents> documents = null;

  @JsonProperty("legalContracts")
  private List<LegalContracts> legalContracts = null;

  public DIMLicence licence(LicenceType licence) {
    this.licence = licence;
    return this;
  }

   /**
   * Get licence
   * @return licence
  **/

  public LicenceType getLicence() {
    return licence;
  }

  public void setLicence(LicenceType licence) {
    this.licence = licence;
  }

  public DIMLicence tradeName(TradeNameType tradeName) {
    this.tradeName = tradeName;
    return this;
  }

   /**
   * Get tradeName
   * @return tradeName
  **/

  public TradeNameType getTradeName() {
    return tradeName;
  }

  public void setTradeName(TradeNameType tradeName) {
    this.tradeName = tradeName;
  }

  public DIMLicence businessLocation(List<BusinessLocation> businessLocation) {
    this.businessLocation = businessLocation;
    return this;
  }

  public DIMLicence addBusinessLocationItem(BusinessLocation businessLocationItem) {
    if (this.businessLocation == null) {
      this.businessLocation = new ArrayList<>();
    }
    this.businessLocation.add(businessLocationItem);
    return this;
  }

   /**
   * Get businessLocation
   * @return businessLocation
  **/

  public List<BusinessLocation> getBusinessLocation() {
    return businessLocation;
  }

  public void setBusinessLocation(List<BusinessLocation> businessLocation) {
    this.businessLocation = businessLocation;
  }

  public DIMLicence digitalPlatform(List<DigitalPlatform> digitalPlatform) {
    this.digitalPlatform = digitalPlatform;
    return this;
  }

  public DIMLicence addDigitalPlatformItem(DigitalPlatform digitalPlatformItem) {
    if (this.digitalPlatform == null) {
      this.digitalPlatform = new ArrayList<>();
    }
    this.digitalPlatform.add(digitalPlatformItem);
    return this;
  }

   /**
   * Get digitalPlatform
   * @return digitalPlatform
  **/

  public List<DigitalPlatform> getDigitalPlatform() {
    return digitalPlatform;
  }

  public void setDigitalPlatform(List<DigitalPlatform> digitalPlatform) {
    this.digitalPlatform = digitalPlatform;
  }

  public DIMLicence address(LicenceAddressType address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/

  public LicenceAddressType getAddress() {
    return address;
  }

  public void setAddress(LicenceAddressType address) {
    this.address = address;
  }

  public DIMLicence licenceMembers(List<LicenceMembers> licenceMembers) {
    this.licenceMembers = licenceMembers;
    return this;
  }

  public DIMLicence addLicenceMembersItem(LicenceMembers licenceMembersItem) {
    if (this.licenceMembers == null) {
      this.licenceMembers = new ArrayList<>();
    }
    this.licenceMembers.add(licenceMembersItem);
    return this;
  }

   /**
   * Get licenceMembers
   * @return licenceMembers
  **/

  public List<LicenceMembers> getLicenceMembers() {
    return licenceMembers;
  }

  public void setLicenceMembers(List<LicenceMembers> licenceMembers) {
    this.licenceMembers = licenceMembers;
  }

  public DIMLicence operatingActivities(List<OperatingActivities> operatingActivities) {
    this.operatingActivities = operatingActivities;
    return this;
  }

  public DIMLicence addOperatingActivitiesItem(OperatingActivities operatingActivitiesItem) {
    if (this.operatingActivities == null) {
      this.operatingActivities = new ArrayList<>();
    }
    this.operatingActivities.add(operatingActivitiesItem);
    return this;
  }

   /**
   * Get operatingActivities
   * @return operatingActivities
  **/

  public List<OperatingActivities> getOperatingActivities() {
    return operatingActivities;
  }

  public void setOperatingActivities(List<OperatingActivities> operatingActivities) {
    this.operatingActivities = operatingActivities;
  }

  public DIMLicence documents(List<Documents> documents) {
    this.documents = documents;
    return this;
  }

  public DIMLicence addDocumentsItem(Documents documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

   /**
   * Get documents
   * @return documents
  **/

  public List<Documents> getDocuments() {
    return documents;
  }

  public void setDocuments(List<Documents> documents) {
    this.documents = documents;
  }

  public DIMLicence legalContracts(List<LegalContracts> legalContracts) {
    this.legalContracts = legalContracts;
    return this;
  }

  public DIMLicence addLegalContractsItem(LegalContracts legalContractsItem) {
    if (this.legalContracts == null) {
      this.legalContracts = new ArrayList<>();
    }
    this.legalContracts.add(legalContractsItem);
    return this;
  }

   /**
   * Get legalContracts
   * @return legalContracts
  **/

  public List<LegalContracts> getLegalContracts() {
    return legalContracts;
  }

  public void setLegalContracts(List<LegalContracts> legalContracts) {
    this.legalContracts = legalContracts;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DIMLicence diMLicence = (DIMLicence) o;
    return Objects.equals(this.licence, diMLicence.licence) &&
        Objects.equals(this.tradeName, diMLicence.tradeName) &&
        Objects.equals(this.businessLocation, diMLicence.businessLocation) &&
        Objects.equals(this.digitalPlatform, diMLicence.digitalPlatform) &&
        Objects.equals(this.address, diMLicence.address) &&
        Objects.equals(this.licenceMembers, diMLicence.licenceMembers) &&
        Objects.equals(this.operatingActivities, diMLicence.operatingActivities) &&
        Objects.equals(this.documents, diMLicence.documents) &&
        Objects.equals(this.legalContracts, diMLicence.legalContracts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licence, tradeName, businessLocation, digitalPlatform, address, licenceMembers, operatingActivities, documents, legalContracts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DIMLicence {\n");
    
    sb.append("    licence: ").append(toIndentedString(licence)).append("\n");
    sb.append("    tradeName: ").append(toIndentedString(tradeName)).append("\n");
    sb.append("    businessLocation: ").append(toIndentedString(businessLocation)).append("\n");
    sb.append("    digitalPlatform: ").append(toIndentedString(digitalPlatform)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    licenceMembers: ").append(toIndentedString(licenceMembers)).append("\n");
    sb.append("    operatingActivities: ").append(toIndentedString(operatingActivities)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    legalContracts: ").append(toIndentedString(legalContracts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
